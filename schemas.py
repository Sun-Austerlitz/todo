from pydantic import BaseModel, Field, EmailStr
from typing import Annotated
from enum import Enum
from typing import Optional, List
from datetime import datetime


class TodoCreate(BaseModel):
    """Schema for creating a todo."""
    title: str = Field(..., min_length=1)
    description: Optional[str] = None


class TodoRead(BaseModel):
    """Schema for reading a todo (API response)."""
    id: int
    title: str
    description: Optional[str]
    owner_id: int
    is_done: bool
    created_at: datetime
    updated_at: datetime

    model_config = {"from_attributes": True}


class TodoUpdate(BaseModel):
    """Schema for partial updates of a todo."""
    title: Optional[str] = None
    description: Optional[str] = None
    is_done: Optional[bool] = None


class RefreshRequest(BaseModel):
    """Request body for refreshing access token using a refresh token."""
    refresh_token: str


class TokenResponse(BaseModel):
    """Standard response containing access and refresh tokens."""
    access_token: str
    token_type: str
    refresh_token: str


class LoginRequest(BaseModel):
    """JSON body for username/password login.

    Используется для удобства клиентов (например, curl или fetch) вместо
    application/x-www-form-urlencoded формы OAuth2. Поля: username, password.
    """
    # username is an email for our system
    username: EmailStr
    # enforce minimum password length at schema level
    password: Annotated[str, Field(min_length=8)]
    # Device type the client identifies as; used to limit one active session per device type
    device_type: Optional[str] = None
    # Optional device identifier generated by the client
    device_id: Optional[str] = None


class DeviceType(str, Enum):
    web = "web"
    mobile = "mobile"


class UserCreate(BaseModel):
    """Payload for creating a user via the public registration endpoint.

    Note: `scopes` is intentionally not part of this schema — public
    registration must not be able to assign roles. Use admin endpoints to
    manage scopes.
    """
    email: EmailStr
    password: Annotated[str, Field(min_length=8)]


class UserRead(BaseModel):
    id: int
    email: str
    scopes: List[str]
    is_active: bool
    created_at: datetime
    updated_at: datetime

    model_config = {"from_attributes": True}


class PasswordChange(BaseModel):
    current_password: str
    new_password: Annotated[str, Field(min_length=8)]


class PasswordResetRequest(BaseModel):
    email: EmailStr
